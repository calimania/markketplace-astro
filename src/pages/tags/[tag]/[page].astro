---
import { type CollectionEntry, getCollection } from "astro:content";
import TagPosts from "@layouts/TagPosts.astro";
import getUniqueTags from "@utils/getUniqueTags";
import getPostsByTag from "@utils/getPostsByTag";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";

export interface Props {
  post: CollectionEntry<"posts">;
  tag?: string;
  tagName: string;
}

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  const tags = getUniqueTags(posts);

  // Handle case with no tags
  if (!tags.length) {
    return [
      {
        params: { tag: "all", page: "1" },
        props: { tag: "all", tagName: "All Posts", page: "1" },
      },
    ];
  }

  return tags.flatMap(({ tag, tagName }) => {
    const tagPosts = getPostsByTag(posts, tag);
    const totalPages = getPageNumbers(tagPosts.length);

    return totalPages.map(pageNum => ({
      params: {
        tag: tag || "all",
        page: String(pageNum),
      },
      props: {
        tag,
        tagName,
        page: String(pageNum),
      },
    }));
  });
}

const { page } = Astro.params;
const { tag, tagName } = Astro.props;

const posts = await getCollection("posts");

const postsByTag = getPostsByTag(posts, tag || "all");

const pagination = getPagination({
  posts: postsByTag,
  page,
});
---

<TagPosts {...pagination} tag={tag || "all"} tagName={tagName || "all"} />
