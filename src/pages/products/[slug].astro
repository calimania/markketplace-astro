---
import type { CollectionEntry } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { markketplace } from "@config";
import HeroImage from "@components/HeroImage.astro";

import { marked } from "marked";

import { getCollection } from "astro:content";
import type Store from "@interfaces/Store";
import { slugifyStr } from "@utils/slugify";
import type Product from "@interfaces/Product";

export interface Props {
  currentPage: number;
  totalPages: number;
  stores: CollectionEntry<"stores">[];
  product?: { data: Product };
}

export async function getStaticPaths() {
  const products = await getCollection("products");

  const productsResult = products.map((product: { data: Product }) => ({
    params: {
      slug: `${product.data.slug || slugifyStr(product.data.Name)}`,
    },
    props: { product },
  })) as { params: { slug: string }; props: { product: Product } }[];

  return [...productsResult];
}

const { product } = Astro.props;

const stores = await getCollection("stores");
const store = stores.find(
  (store: { data: Store }) => store.data.slug == markketplace.STORE_SLUG
);

const htmlDescription = marked.parse(product?.data?.Description || "");
const prices = product?.data?.PRICES || [];

const selectedImage =
  product?.data?.Thumbnail ||
  product?.data?.Slides?.[0] ||
  product?.data?.SEO?.metaImage ||
  {};

const selectedPrice = prices[0];
---

<script>
  // Front matter TS is executed in the ~server during the build process
  // import confetti from 'canvas-confetti';

  const buttons = document.querySelectorAll("[data-astro-image]");

  // Add event listeners to fire confetti when a button is clicked.
  buttons.forEach(button => {
    button.addEventListener("click", e => {
      const jsonData = e.target?.dataset?.astroImage; // Access the data attribute
      try {
        const jsonObject = JSON.parse(jsonData); // Parse the JSON string
        const heroImage = document.querySelector(".hero-image");
        if (heroImage) {
          heroImage.src = jsonObject.url;
        }

        console.log({ e, jsonData, jsonObject });
      } catch (error) {
        console.error("Error parsing JSON", error);
      }
    });
  });
</script>

<Layout
  title={`${product?.data?.Name} | ${store?.data?.title}`}
  meta={{
    title: product?.data?.SEO?.metaTitle,
    image: product?.data?.Thumbnail?.url,
    description: product?.data?.SEO?.metaDescription,
  }}
>
  <Header activeNav="pages" store={store} />

  <main class="lg:px-8 px-4 py-12 sm:px-6">
    <div class="mx-auto max-w-7xl">
      <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
        {/* Left column */}
        <div class="flex flex-col">
          {/* Main product image */}
          <div class="aspect-w-3 aspect-h-4 overflow-hidden rounded-lg">
            <HeroImage title={product?.data?.Name} image={selectedImage} />
          </div>
          {/* Product image gallery */}
          {
            product?.data?.Slides?.length > 0 && (
              <div class="mt-8">
                <div class="grid grid-cols-3 gap-2">
                  {product?.data?.Slides?.map((slide: any) => (
                    <div class="aspect-w-3 aspect-h-4 overflow-hidden rounded-lg">
                      <img
                        src={slide.url}
                        alt={slide.alternativeText || ""}
                        data-astro-image={JSON.stringify(slide?.formats?.large)}
                        class="h-full w-full cursor-pointer object-cover object-center transition-opacity hover:opacity-75"
                      />
                    </div>
                  ))}
                </div>
              </div>
            )
          }
        </div>

        {/* Right column */}
        <div class="lg:mt-0 mt-10 px-4 sm:mt-16 sm:px-0">
          <h1
            class="text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white"
          >
            {product?.data?.Name}
          </h1>

          {/* Product description */}
          <div class="mt-6">
            <div
              class="prose space-y-6 text-base text-gray-700 dark:prose-invert dark:text-gray-300"
              set:html={htmlDescription}
            />
          </div>

          {/* Price selector */}
          <div class="mt-8">
            <div class="flex items-center justify-between">
              <h2 class="text-sm font-medium text-gray-900 dark:text-white">
                Size
              </h2>
              <span class="text-sm text-gray-500">
                Select your preferred option
              </span>
            </div>

            <div class="mt-4">
              <select
                class="block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-accent-500 focus:outline-none focus:ring-accent-500 dark:border-gray-600 dark:bg-gray-700"
              >
                {
                  prices.map((price: any) => (
                    <option value={price.STRIPE_ID}>
                      {price.Name.replace("_", " ")} - ${price.Price}{" "}
                      {price.Currency}
                    </option>
                  ))
                }
              </select>
            </div>
          </div>

          {/* Add to cart button */}
          <div class="mt-8">
            <button
              disabled
              class="bg-accent-600 flex w-full items-center justify-center rounded-md border border-transparent px-8 py-3 text-base font-medium text-white hover:bg-accent-700 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            >
              Coming Soon
            </button>
          </div>

          {/* Product metadata */}
          <div class="mt-8 border-t border-gray-200 pt-8 dark:border-gray-700">
            <div class="prose dark:prose-invert">
              <h3 class="text-sm font-medium text-gray-900 dark:text-white">
                Details
              </h3>
              <div class="mt-4 space-y-6">
                {
                  product?.data?.Tag?.map((tag: any) => (
                    <span class="text-accent-800 dark:bg-accent-800 mr-2 inline-flex items-center rounded-full bg-accent-100 px-3 py-0.5 text-sm font-medium dark:text-accent-100">
                      {tag.Label}
                    </span>
                  ))
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>
